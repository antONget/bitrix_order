from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.filters import StateFilter

import keyboards.keyboards_edit_list_personal as kb
import database.requests as rq
from filter.admin_filter import check_super_admin
from config_data.config import Config, load_config
from secrets import token_urlsafe
import asyncio
import logging

config: Config = load_config()
router = Router()


class Personal(StatesGroup):
    id_tg_personal = State()
    id_tg_ban = State()


# –ü–µ—Ä—Å–æ–Ω–∞–ª
@router.message(F.text == 'üë®‚Äçüíº –ü–µ—Ä—Å–æ–Ω–∞–ª üë®‚Äçüíº', lambda message: check_super_admin(message.chat.id))
async def process_change_list_personal(message: Message) -> None:
    """
    –í—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
    :param message:
    :return:
    """
    logging.info(f'process_change_list_personal: {message.chat.id}')
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.",
                         reply_markup=kb.keyboard_select_role())


@router.callback_query(F.data == 'add_user')
async def process_add_user(callback: CallbackQuery) -> None:
    logging.info(f'process_add_user: {callback.message.chat.id}')
    token = str(token_urlsafe(8))
    data = {"token": token}
    await rq.add_token(data=data)
    await callback.message.edit_text(text=f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —ç—Ç–æ—Ç TOKEN'
                                          f' <code>{token}</code>.'
                                          f' –ü–æ —ç—Ç–æ–º—É TOKEN –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,'
                                          f' –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É, –∫—Ä–æ–º–µ —Ç–µ—Ö –ª–∏—Ü –¥–ª—è –∫–æ–≥–æ –æ–Ω'
                                          f' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω',
                                     parse_mode='html')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data.startswith('edit_list_'))
async def process_select_action(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å —Ä–æ–ª—å—é –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_add_admin: {callback.message.chat.id}')
    edit_role = callback.data.split('_')[2]
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–∞'
    if edit_role == rq.UserRole.dispatcher:
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞'
    await state.update_data(edit_role=edit_role)
    await callback.message.edit_text(text=f"–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å {role}?",
                                     reply_markup=kb.keyboard_select_action())
    await callback.answer()


@router.callback_query(F.data == 'personal_add')
async def process_personal_add(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_personal_add: {callback.message.chat.id}')
    data = await state.get_data()
    edit_role = data['edit_role']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'
    if edit_role == 'dispatcher':
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º'
    await callback.message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ id telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ–≥–æ {role}.\n\n'
                                       f'–í–∞–∂–Ω–æ!!! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n\n'
                                       f'–ü–æ–ª—É—á–∏—Ç—å id telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞: '
                                       f'@getmyid_bot –∏–ª–∏ @username_to_id_bot')
    await state.set_state(Personal.id_tg_personal)


@router.message(F.text, StateFilter(Personal.id_tg_personal))
async def get_id_tg_personal(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º id —Ç–µ–ª–µ–≥–∞—Ä–∞–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    :param message:
    :param state:
    :return:
    """
    tg_id_personal = int(message.text)
    data = await state.get_data()
    edit_role = data['edit_role']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
    if edit_role == 'dispatcher':
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤'
    await rq.set_user_role(tg_id=tg_id_personal, role=edit_role)
    user = await rq.get_user_tg_id(tg_id=tg_id_personal)
    if user:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ {role}')
        await state.set_state(default_state)
    else:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id={tg_id_personal} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await state.set_state(default_state)


@router.callback_query(F.data == 'ban_user')
async def process_personal_add(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_personal_add: {callback.message.chat.id}')
    await callback.message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ id telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –±–æ—Ç–µ.\n\n'
                                       f'–ü–æ–ª—É—á–∏—Ç—å id telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞: '
                                       f'@getmyid_bot –∏–ª–∏ @username_to_id_bot')
    await state.set_state(Personal.id_tg_ban)


@router.message(F.text, StateFilter(Personal.id_tg_ban))
async def get_id_tg_personal(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º id —Ç–µ–ª–µ–≥–∞—Ä–∞–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∞
    :param message:
    :param state:
    :return:
    """
    tg_id_ban = int(message.text)
    await rq.set_user_role(tg_id=tg_id_ban, role='ban')
    user = await rq.get_user_tg_id(tg_id=tg_id_ban)
    if user:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await state.set_state(default_state)
    else:
        await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c id={tg_id_ban} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await state.set_state(default_state)


# –æ—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data == 'not_add_personal_list')
async def process_not_add_admin_list(callback: CallbackQuery, bot: Bot) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    :param callback:
    :param bot:
    :return:
    """
    logging.info(f'process_not_add_admin_list: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await process_change_list_personal(callback.message)


# —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data == 'add_personal_list')
async def process_add_admin_list(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_add_admin_list: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    data = await state.get_data()
    edit_role = data['edit_role']
    tg_id = data['add_personal']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'
    if edit_role == rq.UserRole.dispatcher:
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º'
    await rq.set_user_role(tg_id=tg_id, role=edit_role)
    await callback.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω {role}', show_alert=True)
    await asyncio.sleep(1)
    await process_change_list_personal(callback.message)


# —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == 'personal_delete')
async def process_del_admin(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è –µ–≥–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_del_admin: {callback.message.chat.id}')
    data = await state.get_data()
    edit_role = data['edit_role']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
    if edit_role == 'dispatcher':
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤'
    list_users = await rq.get_users_role(role=edit_role)
    list_personal = []
    for user in list_users:
        list_personal.append([user.tg_id, user.username])
    keyboard = kb.keyboards_del_admin(list_personal, 0, 2, 6)
    await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ {role}',
                                     reply_markup=keyboard)
    await callback.answer()


# >>>>
@router.callback_query(F.data.startswith('admin_del_forward'))
async def process_forward_del_admin(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_forward_del_admin: {callback.message.chat.id}')
    data = await state.get_data()
    edit_role = data['edit_role']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
    if edit_role == 'dispatcher':
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤'
    list_users = await rq.get_users_role(role=edit_role)
    list_personal = []
    for user in list_users:
        list_personal.append([user.tg_id, user.username])
    forward = int(callback.data.split('_')[3]) + 1
    back = forward - 2
    keyboard = kb.keyboards_del_admin(list_personal, back, forward, 2)
    try:
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ {role}',
                                         reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Çe –ø–æ–ª—å–∑–æ–≤–∞—Çe–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ {role}',
                                         reply_markup=keyboard)


# <<<<
@router.callback_query(F.data.startswith('admin_del_back'))
async def process_back_del_admin(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_back_del_admin: {callback.message.chat.id}')
    data = await state.get_data()
    edit_role = data['edit_role']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
    if edit_role == 'dispatcher':
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤'
    list_users = await rq.get_users_role(role=edit_role)
    list_personal = []
    for user in list_users:
        list_personal.append([user.tg_id, user.username])
    back = int(callback.data.split('_')[3]) - 1
    forward = back + 2
    keyboard = kb.keyboards_del_admin(list_personal, back, forward, 2)
    try:
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ {role}',
                                         reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Çe –ø–æ–ª—å–∑–æ–≤–∞—Çe–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ {role}',
                                         reply_markup=keyboard)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫
@router.callback_query(F.data.startswith('admin_del'))
async def process_delete_user(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'process_delete_user: {callback.message.chat.id}')
    data = await state.get_data()
    edit_role = data['edit_role']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
    if edit_role == rq.UserRole.dispatcher:
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤'
    telegram_id = int(callback.data.split('_')[2])
    user_info = await rq.get_user_tg_id(tg_id=telegram_id)
    await state.update_data(del_personal=telegram_id)
    await callback.message.edit_text(text=f'–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info.username} –∏–∑ {role}',
                                     reply_markup=kb.keyboard_del_list_admins())


# –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data == 'not_del_personal_list')
async def process_not_del_personal_list(callback: CallbackQuery, bot: Bot) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param callback:
    :return:
    """
    logging.info(f'process_not_del_personal_list: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await process_change_list_personal(callback.message)


# —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data == 'del_personal_list')
async def process_del_personal_list(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    logging.info(f'process_del_personal_list: {callback.message.chat.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    data = await state.get_data()
    tg_id = data['del_personal']
    edit_role = data['edit_role']
    role = '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
    if edit_role == 'dispatcher':
        role = '–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤'
    await rq.set_user_role(tg_id=tg_id, role=rq.UserRole.user, change_role=edit_role)
    await callback.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ {role}', show_alert=True)
    await asyncio.sleep(1)
    await process_change_list_personal(callback.message)
