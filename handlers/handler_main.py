from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state


from config_data.config import Config, load_config
import database.requests as rq
import keyboards.keyboard_main as kb
from filter.admin_filter import check_personal, check_super_admin
from bitrix import get_data_deal

from faker import Faker
from datetime import datetime
import logging
import random

router = Router()
config: Config = load_config()


class Task(StatesGroup):
    id_task = State()
    token = State()


@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "/start"
    –†–∞–∑–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ —Ç–æ –∑–∞–ø—Ä–∞–≤—à–∏–≤–∞–µ–º —É –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω)
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_start_command {message.chat.id}")
    await state.set_state(default_state)
    # –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if check_super_admin(telegram_id=message.chat.id):
        data = {"token": "admin", "tg_id": message.chat.id, "username": message.from_user.username, "is_admin": 1}
        await rq.add_admin(data=data)
    # –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    if await rq.get_user_tg_id(tg_id=message.chat.id):
        # –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if check_super_admin(telegram_id=message.chat.id):
            await message.answer(text=f'–Ø –±–æ—Ç MasterClass. –†–∞–¥ —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å. üëã',
                                 reply_markup=kb.keyboards_main())
        # –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        elif await check_personal(tg_id=message.chat.id):
            await message.answer(text=f'–Ø –±–æ—Ç MasterClass. –†–∞–¥ —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å. üëã',
                                 reply_markup=kb.keyboards_main_personal())
        # –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        else:
            await message.answer(text=f'–Ø –±–æ—Ç MasterClass. –†–∞–¥ —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å. üëã',
                                 reply_markup=kb.keyboards_main_user())
    else:
        await message.answer(text='–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω.')
        await state.set_state(Task.token)


@router.message(StateFilter(Task.token))
async def get_token(message: Message, bot: Bot, state: FSMContext):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ –≤ –±–∞–∑–µ
    :param message:
    :param bot:
    :param state:
    :return:
    """
    user = await rq.get_user_token(token=message.text)
    if user and not user.tg_id:
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = 'None'
        data = {"token": message.text, "tg_id": message.chat.id, "username": username}
        await rq.set_add_user(data=data)
        await message.answer(text=f'–Ø –±–æ—Ç MasterClass. –†–∞–¥ —Å –≤–∞–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å. üëã',
                             reply_markup=kb.keyboards_main_user())
        list_admin = config.tg_bot.admin_ids.split(',')
        for admin in list_admin:
            try:
                await bot.send_message(chat_id=int(admin),
                                       text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ')
            except IndexError:
                pass
        await state.set_state(default_state)
    else:
        await message.answer(text='TOKEN –Ω–∞ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é')


@router.message(F.text == '‚úÖ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ')
async def add_task(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f'add_task {message.chat.id}')
    if await check_personal(tg_id=message.chat.id, role=rq.UserRole.dispatcher):
        await message.answer(text='üëâ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:')
        await state.set_state(Task.id_task)
    else:
        await message.answer(text=f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.'
                                  f' –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')


@router.message(StateFilter(Task.id_task), lambda message: message.text.isdigit())
async def add_task(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ CRM Bitrix –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
    :param message:
    :param state:
    :return:
    """
    logging.info(f'add_task {message.chat.id}')
    try:
        id_bitrix = int(message.text)
    except:
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')
        await state.set_state(default_state)
        return
    if await rq.get_order_bitrix_id(bitrix_id=id_bitrix):
        await message.answer('–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        await state.set_state(default_state)
        return
    await message.answer(text='–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ bitrix...')
    order_dict: dict = await get_data_deal(id_deal=id_bitrix)
    if order_dict == 'No_deal':
        await message.answer(text=f'–ó–∞–∫–∞–∑ {id_bitrix} –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        await state.set_state(default_state)
        return
    if order_dict == 'No_contact':
        await message.answer(text=f'–ö –∑–∞–∫–∞–∑—É ‚Ññ {id_bitrix} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç!')
        await state.set_state(default_state)
        return
    data = {"id_bitrix": id_bitrix,
            "status": rq.OrderStatus.new,
            "data_create": datetime.today().strftime('%H/%M/%S/%d/%m/%Y'),
            "tg_create": message.chat.id,
            "client_name": order_dict['–ò–º—è']['NAME'],
            "client_second_name": order_dict['–§–∞–º–∏–ª–∏—è']['SECOND_NAME'],
            "client_last_name": order_dict['–û—Ç—á–µ—Å—Ç–≤–æ']['LAST_NAME'],
            "client_phone": order_dict["–¢–µ–ª–µ—Ñ–æ–Ω"]["PHONE"],
            "task_type_work": order_dict["–¢–∏–ø —Ä–∞–±–æ—Ç—ã"]["UF_CRM_1722889585844"],
            "task_detail": order_dict["–î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã:"]["UF_CRM_1723401519885"],
            "task_saratov_area": order_dict["–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å "]["UF_CRM_1723096401639"],
            "task_saratov": order_dict["–°–∞—Ä–∞—Ç–æ–≤"]["UF_CRM_1723401598955"],
            "task_engels": order_dict["–≠–Ω–≥–µ–ª—å—Å"]["UF_CRM_1722889900952"],
            "task_street": order_dict["–£–ª–∏—Ü–∞"]["UF_CRM_1722889043533"].split('|')[0],
            "task_pay": order_dict["–û–ø–ª–∞—Ç–∞"]["UF_CRM_1722890070498"],
            "task_begin": order_dict["–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç "]["UF_CRM_1722890021769"]}
    await rq.add_order(data=data, id_bitrix=id_bitrix)

    order = await rq.get_order_bitrix_id(bitrix_id=id_bitrix)
    name = ''
    for n in [order.client_second_name, order.client_name, order.client_last_name]:
        if n != 'None':
            name += f'{n} '
    address = ''
    if order.task_saratov != 'None':
        if '–≥–æ—Ä–æ–¥' not in order.task_saratov:
            address += f'–ì–æ—Ä–æ–¥: <b>{"–°–∞—Ä–∞—Ç–æ–≤"}</b>\n'
            if order.task_saratov:
                address += f'–†–∞–π–æ–Ω: <b>{order.task_saratov}</b>\n'
        else:
            address += f'–ì–æ—Ä–æ–¥: <b>{"–°–∞—Ä–∞—Ç–æ–≤"}</b>\n'
    elif order.task_engels != 'None':
        if '–≥–æ—Ä–æ–¥' not in order.task_engels:
            address += f'–ì–æ—Ä–æ–¥: <b>{"–≠–Ω–≥–µ–ª—å—Å"}</b>\n'
            if order.task_engels:
                address += f'–†–∞–π–æ–Ω: <b>{order.task_engels}</b>\n'
        else:
            address += f'–ì–æ—Ä–æ–¥: <b>{"–≠–Ω–≥–µ–ª—å—Å"}</b>\n'
    elif order.task_saratov_area != 'None':
        address += f'–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å:\n' \
                        f'–†–∞–π–æ–Ω: <b>{order.task_saratov_area}</b>\n'
    if order.task_street:
        address += f'–£–ª–∏—Ü–∞: <b>{order.task_street.split("|")[0]}</b>\n\n'
    await message.answer(text=f'–ó–∞–∫–∞–∑ ‚Ññ <b>{order.id_bitrix}</b>\n\n'
                              f'<b>–ö–ª–∏–µ–Ω—Ç:</b>\n'
                              f'–ò–º—è: <b>{name}</b>\n'
                              f'–¢–µ–ª–µ—Ñ–æ–Ω: <code>{order.client_phone}</code>\n'
                              f'–ê–¥—Ä–µ—Å:\n'
                              f'{address}\n'
                              f'–¢–∏–ø —Ä–∞–±–æ—Ç—ã: <b>{order.task_type_work}</b>\n'
                              f'–î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã: <b>{order.task_detail}</b>\n'
                              f'–û–ø–ª–∞—Ç–∞: <b>{order.task_pay}</b>\n'
                              f'–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç: <b>{order.task_begin}</b>\n',
                         parse_mode='html')
    await message.answer(text=f'–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î')
    await state.set_state(default_state)
