from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import database.requests as rq
import logging


async def keyboard_select_status_order(tg_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    :return:
    """
    button_1 = InlineKeyboardButton(text=f'üîî –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã üîî ({len(await rq.get_orders_status(rq.OrderStatus.new))})',
                                    callback_data='user_order_status_new')
    button_2 = InlineKeyboardButton(
        text=f'üõ† –í —Ä–∞–±–æ—Ç–µ üõ† ({len(await rq.get_order_idtg_and_status(tg_id=tg_id, status=rq.OrderStatus.work))})',
        callback_data='user_order_status_work')
    button_3 = InlineKeyboardButton(
        text=f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ‚úÖ ({len(await rq.get_order_idtg_and_status(tg_id=tg_id, status=rq.OrderStatus.complete))})',
        callback_data='user_order_status_complete')
    button_4 = InlineKeyboardButton(
        text=f'üîï –ù–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–µ üîï ({len(await rq.get_order_idtg_and_status(tg_id=tg_id, status=rq.OrderStatus.unclaimed))})',
        callback_data='user_order_status_unclaimed')
    button_5 = InlineKeyboardButton(
        text=f'üö´ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ üö´ ({len(await rq.get_order_idtg_and_status(tg_id=tg_id, status=rq.OrderStatus.cancel))})',
        callback_data='user_order_status_cancel')
    button_6 = InlineKeyboardButton(
        text=f'üîé –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ üîç',
        callback_data='user_order_find')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2], [button_3], [button_4], [button_5],
                                                     [button_6]])
    return keyboard


def keyboards_order_item(list_orders: list, block: int, status_order: str):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–∫–∞–∑–∞
    :param list_orders:
    :param block:
    :param status_order:
    :return:
    """
    logging.info(f"keyboards_order_item {len(list_orders)}, {block}")
    kb_builder = InlineKeyboardBuilder()
    buttons = []
    if status_order == 'new':
        text = f'–í–∑—è—Ç—å –∑–∞–∫–∞–∑ {block + 1}/{len(list_orders)}'
        button = f'set_work_{list_orders[block].id}'
        buttons.append(InlineKeyboardButton(
            text=text,
            callback_data=button))
    elif status_order == 'work':
        text = f'–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å'
        button = f'change_status_{list_orders[block].id}'
        buttons.append(InlineKeyboardButton(
            text=text,
            callback_data=button))
        text = f'–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
        button = f'add_detail_{list_orders[block].id}'
        buttons.append(InlineKeyboardButton(
            text=text,
            callback_data=button))
    if status_order != 'new':
        text = f'–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        button = f'user_detail_order_{list_orders[block].id}'
        buttons.append(InlineKeyboardButton(
            text=text,
            callback_data=button))
    button_back = InlineKeyboardButton(text='<<',
                                       callback_data=f'user_order_back_{str(block)}')
    button_next = InlineKeyboardButton(text='>>',
                                       callback_data=f'user_order_forward_{str(block)}')
    kb_builder.row(*buttons, width=1)
    kb_builder.row(button_back, button_next)
    return kb_builder.as_markup()


def keyboard_back_item() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    :return:
    """
    button_1 = InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥',
                                    callback_data='back_order')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1]])
    return keyboard


def keyboard_change_status() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    :return:
    """
    button_1 = InlineKeyboardButton(text=f'–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑',
                                    callback_data='set_status_cancel')
    button_2 = InlineKeyboardButton(text=f'–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
                                    callback_data='set_status_complete')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2]])
    return keyboard


def keyboard_continue_detail() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    :return:
    """
    button_1 = InlineKeyboardButton(text=f'–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ',
                                    callback_data='add_more')
    button_2 = InlineKeyboardButton(text=f'–ó–∞–≤–µ—Ä—à–∏—Ç—å',
                                    callback_data='add_not_more')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2]])
    return keyboard
